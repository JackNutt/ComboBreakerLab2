import RPi.GPIO as GPIO
import time

# Set up the GPIO mode
GPIO.setmode(GPIO.BCM)  
servo_pin = 18          

# Set up the servo pin as output
GPIO.setup(servo_pin, GPIO.OUT)

# Start PWM with 50Hz frequency
pwm = GPIO.PWM(servo_pin, 50)  

# Initialize at a stable midpoint (90 degrees)
pwm.start(7.5)  
time.sleep(1)  # Let servo stabilize

def set_servo_angle(angle):
    """ Move the servo to a specific angle (0-180 degrees) """
    if 0 <= angle <= 180:
        duty_cycle = (angle / 18) + 2.5  # Adjusted for Batan D125F
        pwm.ChangeDutyCycle(duty_cycle)
        time.sleep(0.7)  # Increased delay for stability
    else:
        print("Angle out of range (0-180)")

try:
    while True:
        print("Moving to 0°")
        set_servo_angle(0)
        time.sleep(1)

        print("Moving to 90°")
        set_servo_angle(90)
        time.sleep(1)

        print("Moving to 180°")
        set_servo_angle(180)
        time.sleep(1)

except KeyboardInterrupt:


--------------------------------------------------------------------------------------------------------------------------------




import RPi.GPIO as GPIO
import time

# Set up GPIO
GPIO.setmode(GPIO.BCM)
servo_pin = 18
GPIO.setup(servo_pin, GPIO.OUT)

# Start PWM at 50Hz (20ms period)
pwm = GPIO.PWM(servo_pin, 50)
pwm.start(0)  # Start at 0% duty cycle

try:
    while True:
        duty = float(input("Enter duty cycle (2 to 12, or type 'exit' to stop): "))
        if duty == "exit":
            break
        pwm.ChangeDutyCycle(duty)
        time.sleep(1)  # Give servo time to move

except KeyboardInterrupt:
    print("Stopping")

pwm.stop()
GPIO.cleanup()

    print("Stopping")
    pwm.stop()
    GPIO.cleanup()


----------------------------------------------------------------------------------------------------------------

import RPi.GPIO as GPIO
import time

# Set up GPIO
GPIO.setmode(GPIO.BCM)
servo_pin = 18
GPIO.setup(servo_pin, GPIO.OUT)

# Start PWM at 50Hz (20ms period)
pwm = GPIO.PWM(servo_pin, 50)
pwm.start(0)  # Start at 0% duty cycle

def set_servo_angle(angle):
    """
    Move the servo to a specific angle.
    Adjusted for Batan D125F with a working PWM range of 5% - 10%.
    """
    min_duty = 5   # Minimum working duty cycle
    max_duty = 10  # Maximum working duty cycle
    duty_cycle = (angle / 180) * (max_duty - min_duty) + min_duty
    pwm.ChangeDutyCycle(duty_cycle)
    time.sleep(1)  # Increased delay for stability

try:
    print("Initializing Servo to 90° for stability...")
    set_servo_angle(90)  # Start at a middle position
    time.sleep(2)

    while True:
        print("Moving to 0°")
        set_servo_angle(0)
        time.sleep(2)

        print("Moving to 90°")
        set_servo_angle(90)
        time.sleep(2)

        print("Moving to 180°")
        set_servo_angle(180)
        time.sleep(2)

except KeyboardInterrupt:

--------------------------------------------------------------------------------------


import RPi.GPIO as GPIO
import time

GPIO.setmode(GPIO.BCM)
servo_pin = 18
GPIO.setup(servo_pin, GPIO.OUT)
pwm = GPIO.PWM(servo_pin, 50)
pwm.start(0)

try:
    while True:
        duty = float(input("Enter duty cycle (4 to 11, or 'exit' to stop): "))
        if duty == "exit":
            break
        pwm.ChangeDutyCycle(duty)
        time.sleep(1)

except KeyboardInterrupt:
    print("Stopping")

pwm.stop()
GPIO.cleanup()
    print("Stopping")
    pwm.stop()
    GPIO.cleanup()

------------------------------------------------------------------------------------------------


import RPi.GPIO as GPIO
import time

# Set up GPIO
GPIO.setmode(GPIO.BCM)
servo_pin = 18
GPIO.setup(servo_pin, GPIO.OUT)

# Start PWM at 50Hz (20ms period)
pwm = GPIO.PWM(servo_pin, 50)
pwm.start(0)

def set_servo_angle(angle, step=0.2):
    """
    Move the servo gradually to a specific angle using smooth duty cycle transitions.
    This prevents skipping or needing repeated values.
    """
    min_duty = 4  # Based on your findings
    max_duty = 10 # Increase if needed

    target_duty = ((angle + 90) / 180) * (max_duty - min_duty) + min_duty
    current_duty = min_duty  # Start from minimum

    # Gradually increase/decrease duty cycle instead of instant jumps
    while abs(current_duty - target_duty) > step:
        if current_duty < target_duty:
            current_duty += step
        else:
            current_duty -= step
        pwm.ChangeDutyCycle(current_duty)
        time.sleep(0.1)  # Small delay for smoother motion

    pwm.ChangeDutyCycle(target_duty)
    time.sleep(0.5)  # Final position hold

try:
    print("Initializing Servo to 90° for stability...")
    set_servo_angle(0)  # Real-world 90° starting position
    time.sleep(2)

    while True:
        print("Moving to 0° (Real-world -90°)")
        set_servo_angle(-90)
        time.sleep(2)

        print("Moving to 90° (Real-world 0°)")
        set_servo_angle(0)
        time.sleep(2)

        print("Moving to 180° (Real-world +90°)")
        set_servo_angle(90)
        time.sleep(2)

except KeyboardInterrupt:
    print("Stopping")
    pwm.stop()
    GPIO.cleanup()


---------------------------------------------------------------------------


import RPi.GPIO as GPIO
import time

# Set up GPIO
GPIO.setmode(GPIO.BCM)
servo_pin = 18
GPIO.setup(servo_pin, GPIO.OUT)

# Start PWM at 50Hz (20ms period)
pwm = GPIO.PWM(servo_pin, 50)
pwm.start(0)

def set_servo_angle(angle, step=1.0):
    """
    Move the servo to a specific angle smoothly.
    """
    min_duty = 5   # 0° (fully left)
    max_duty = 10  # 180° (fully right)

    target_duty = ((angle) / 180) * (max_duty - min_duty) + min_duty
    current_duty = min_duty  # Start from minimum

    # Gradual movement for smooth transition
    while abs(current_duty - target_duty) > step:
        current_duty += step if current_duty < target_duty else -step
        pwm.ChangeDutyCycle(current_duty)
        time.sleep(0.05)  # Smoother movement

    pwm.ChangeDutyCycle(target_duty)
    time.sleep(0.5)  # Hold position

try:
    print("Initializing Servo to Middle (90°)...")
    set_servo_angle(90)  # Middle position
    time.sleep(2)

    while True:
        print("Moving to 0° (Left)")
        set_servo_angle(0)
        time.sleep(2)

        print("Moving to 90° (Center)")
        set_servo_angle(90)
        time.sleep(2)

        print("Moving to 180° (Right)")
        set_servo_angle(180)
        time.sleep(2)

except KeyboardInterrupt:
    print("Stopping")
    pwm.stop()
    GPIO.cleanup()
